1
00:0:00,000 --> 00:0:03,000
Ok, então onde o MongoDB cabe no mundo?

2
00:0:03,000 --> 00:0:06,000
Se você está pensando sobre bancos de dados e armazenamento de daos em geral,

3
00:0:06,000 --> 00:0:09,000
você pode pensar nestes dois eixos, sendo um deles

4
00:0:09,000 --> 00:0:11,000
a escabilidade e performance que é oferecida pelo

5
00:0:11,000 --> 00:0:13,000
banco de dados

6
00:0:13,000 --> 00:0:15,000
mais sendo melhor - e o outro eixo sendo a profundidade

7
00:0:15,000 --> 00:0:17,000
de funcionalidades que o banco de dados oferece.

8
00:0:17,000 --> 00:0:21,000
Então aqui no canto esquerdo, temos algo muito escalável mas

9
00:0:21,000 --> 00:0:24,000
não tendo muita funcionalidade, são programas

10
00:0:24,000 --> 00:0:28,000
como Memcached e outros armazenamentos gerais chave valor.

11
00:0:28,000 --> 00:0:32,000
E estes programas são realmente escaláveis e de alta performance,

12
00:0:32,000 --> 00:0:35,000
mas eles oferecem quase que nenhuma funcionalidade.

13
00:0:35,000 --> 00:0:38,000
Na outra parte da escala, você tem verdadeiramente

14
00:0:38,000 --> 00:0:41,000
funcionalidades ricas a partir de sistemas de gestão

15
00:0:41,000 --> 00:0:43,000
de banco de dados relacionais.

16
00:0:43,000 --> 00:0:46,000
E este é seu Oracle, seu DB2s, seus servidores SQL.

17
00:0:46,000 --> 00:0:52,000
Agora a questão é, podemos chegar perto desde nível

18
00:0:52,000 --> 00:0:55,000
de funcionalidade mas sem perder toda escabilidade

19
00:0:55,000 --> 00:0:57,000
e desempenho que temos aqui?

20
00:0:57,000 --> 00:1:00,000
Porque sistemas de gerenciamento de banco de dados relacionais

21
00:1:00,000 --> 00:1:02,000
não são conhecidos por serem escaláveis.

22
00:1:02,000 --> 00:1:04,000
Eles escalam muito bem.

23
00:1:04,000 --> 00:1:07,000
Você pode adicionar mais e mais hardware para obter

24
00:1:07,000 --> 00:1:08,000
maior desempenho de um simples nó.

25
00:1:08,000 --> 00:1:11,000
Porém se você quiser escalar e usar um hardware cômodo,

26
00:1:11,000 --> 00:1:13,000
ele não é particularmente bom para isso.

27
00:1:13,000 --> 00:1:16,000
O MongoDB tenta vier por aqui.

28
00:1:16,000 --> 00:1:19,000
E a ideia é reter o máximo, não toda, da

29
00:1:19,000 --> 00:1:22,000
escabilidade e desempenho enquanto lhe dá várias

30
00:1:22,000 --> 00:1:25,000
funcionalidades para se trabalhar, mas não tantas

31
00:1:25,000 --> 00:1:27,000
quanto se tem aqui.

32
00:1:27,000 --> 00:1:30,000
Então o que está perdido aqui, entre isso e isso?

33
00:1:30,000 --> 00:1:31,000
Bem, temos algumas coisas diferentes que estão faltando.

34
00:1:31,000 --> 00:1:35,000
Uma é que o MongoDB não suporta joins

35
00:1:35,000 --> 00:1:39,000
Agora eu falei sobre o MongoDB guardar documentos, e estes

36
00:1:39,000 --> 00:1:41,000
documentos são todos armazenados em uma coleção.

37
00:1:41,000 --> 00:1:46,000
Mas se você quiser fazer um 'join' entre 2 coleções, você 

38
00:1:46,000 --> 00:1:48,000
não pode fazer isso com MongoDB.

39
00:1:48,000 --> 00:1:50,000
E a razão é que os joins são um dos itens

40
00:1:50,000 --> 00:1:53,000
particularmente deficientes quando você tenta escalar

41
00:1:53,000 --> 00:1:54,000
para múltiplos nós.

42
00:1:54,000 --> 00:1:57,000
Outra parte de funcionalidade faltante no MongoDB 

43
00:1:57,000 --> 00:1:59,000
são as transações.

44
00:1:59,000 --> 00:2:03,000
Agora isso soa muito mal, mas a verdade é que você

45
00:2:03,000 --> 00:2:06,000
frequentemente não precisa de transações em aplicações em MongoDB

46
00:2:06,000 --> 00:2:09,000
e onde você necessitará de um sistema relacional.

47
00:2:09,000 --> 00:2:12,000
A razão pe que no MongoDB, os documentos são 

48
00:2:12,000 --> 00:2:15,000
hierárquicos, como eu mostrei anteriormente.

49
00:2:15,000 --> 00:2:17,000
E você pode acessar estes documentos 'atomicamente'.

50
00:2:17,000 --> 00:2:19,000
Então, algo que pode exigir várias atualizações

51
00:2:19,000 --> 00:2:22,000
com um sistema relacional pode ser manuseado com uma simples

52
00:2:22,000 --> 00:2:25,000
transação atômica com um simples documento.

53
00:2:25,000 --> 00:2:28,000
Então o que o MongoDb não suporta são as transações entre

54
00:2:28,000 --> 00:2:30,000
múltiplos documentos.

55
00:2:30,000 --> 00:2:32,000
E a realidade é que na maioria das coisas, você não está 

56
00:2:32,000 --> 00:2:35,000
no mesmo sistema, então você frequentemente precisa de formas de tratar com sistemas

57
00:2:35,000 --> 00:2:38,000
que não o mesmo espaço transacional.

58
00:2:38,000 --> 00:2:42,000
Ok, é hora de um quiz. Vamos falar sobre a relação do MongoDB

59
00:2:42,000 --> 00:2:43,000
com os banco de dados relacionais.

60
00:2:43,000 --> 00:2:47,000
Quais funcionalidades o MongoDB omite a fim de manter

61
00:2:47,000 --> 00:2:49,000
a escabilidade horizontal?

62
00:2:49,000 --> 00:2:53,000
'Joins', 'indexes', 'indexes' secundários e transações

63
00:2:53,000 --> 00:2:54,000
através de múltiplas coleções.

64
00:2:54,000 --> 00:2:56,000
Qual destas o MongoDB omite?

